#include "jacketSDK.h"
#include <cuda.h>
#include <cuda_runtime.h>
#include "device_functions.h"

#define SPDS 15
#define TPB 64

__global__ void pre_collideD3Q15(float * fEq,float * fIn,
				 float * ex, float * ey,
				 float * ez, float * ux_p,
				 float * ux_ip,float * ux_op,
				 float * w, int * inl,
				 int * onl, int nnodes){
  int tid=threadIdx.x+blockIdx.x*blockDim.x;
  if(tid<nnodes){
    __shared__ float fIn_s[TPB][SPDS];
    for(int spd=0;spd<SPDS;spd++){
      fIn_s[threadIdx.x][spd]=fIn[spd*nnodes+tid];
  }

    //get macroscopic velocity and density.
    float ux = 0.; float uy = 0.; float uz = 0.; float rho = 0.;
    float f_tmp; float cu;
    for(int spd=0;spd<SPDS; spd++){
      f_tmp = fIn_s[threadIdx.x][spd];
      rho+=f_tmp;
      ux+=ex[spd]*f_tmp;
      uy+=ey[spd]*f_tmp;
      uz+=ez[spd]*f_tmp;
    }
    //yes, I know, I should ensure rho not equal zero...
    ux = ux/rho;
    uy = uy/rho;
    uz = uz/rho;

//if I'm a boundary node, apply bc.
    if(inl[tid]==1){
      float dx = ux_ip[tid]-ux;
      float dy = -uy;
      float dz =-uz;

      for(int spd=0;spd<SPDS;spd++){
	cu= 3.0*(ex[spd]*dx+ey[spd]*dy+ez[spd]*dz);
	fIn_s[threadIdx.x][spd]+=w[spd]*rho*cu;
	//write updated fIn back to global memory.
	fIn[spd*nnodes+tid]=fIn_s[threadIdx.x][spd];
      }
    
      ux +=dx;
      uy +=dy;
      uz +=dz;
    }

    if(onl[tid]==1){
      float dx = ux_op[tid]-ux;
      float dy = -uy;
      float dz =-uz;

      for(int spd=0;spd<SPDS;spd++){
	cu= 3.0*(ex[spd]*dx+ey[spd]*dy+ez[spd]*dz);
	fIn_s[threadIdx.x][spd]+=w[spd]*rho*cu;
	//write updated fIn back to global memory.
	fIn[spd*nnodes+tid]=fIn_s[threadIdx.x][spd];
      }
    
      ux +=dx;
      uy +=dy;
      uz +=dz;
    }



}
