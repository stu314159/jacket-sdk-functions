#include "jacketSDK.h"
#include <cuda.h>
#include <cuda_runtime.h>
#include "device_functions.h"
#include <iostream>

#define TPB 256

__global__ void fsi2D_set_BC(int * snl, int * vnl,float * up, float * vp,
			      float *v_bc, float v_cutoff,
			      int * NodeList, int nnodes){
  int tid = threadIdx.x+blockIdx.x*blockDim.x;
  if(tid<nnodes){

    //get the value for v_bc
    float v_bc_r = v_bc[tid];
    int nn = NodeList[tid]-1;//make this zero-indexed...

    int vnl_tmp = 0;
    int snl_tmp = 1;
    //test whether v_bc is > v_cutoff
    if(abs(v_bc_r)>v_cutoff){
      //if it is, then the velocity bc is valid...get the 
      snl_tmp=0;
      vnl_tmp=1;
      vp[nn]=v_bc_r;
      up[nn]=0.;
      

    }

    snl[nn]=snl_tmp;
    vnl[nn]=vnl_tmp;

  }
}


err_t jktFunction(int nlhs,mxArray * plhs[], int nrhs, mxArray * prhs[]){

  if(nrhs!=8)
    return err("Usage: fsi2D_set_BC(snl,vnl,up,vp,v_bc,v_cutoff,nodeList,numNodes");

  //collect arguments
  mxArray * m_snl = prhs[0];
  mxArray * m_vnl = prhs[1];
  mxArray * m_up = prhs[2];
  mxArray * m_vp = prhs[3];
  
  mxArray * m_v_bc = prhs[4];
  float v_cutoff = mxGetScalar(prhs[5]);
  mxArray * m_NL = prhs[6];
  int nnodes = mxGetScalar(prhs[7]);

  //declare device pointers
  int * snl_d;
  int * vnl_d;
  float * up_d;
  float * vp_d;
  
  float * v_bc_d;
  int * NL;

  //direct pointers to GPU data
  jkt_mem((void**)&snl_d,m_snl);
  jkt_mem((void**)&vnl_d,m_vnl);
  jkt_mem((void**)&up_d,m_up);
  jkt_mem((void**)&vp_d,m_vp);
  
  jkt_mem((void**)&v_bc_d,m_v_bc);
  jkt_mem((void**)&NL,m_NL);

  dim3 BLOCKS(TPB,1,1);
  dim3 GRIDS((nnodes+TPB-1)/TPB,1,1);

  fsi2D_set_BC<<<GRIDS,BLOCKS>>>(snl_d,vnl_d,up_d,vp_d,v_bc_d,
				  v_cutoff,NL,nnodes);



  return errNone;

}
